# sfz prompt
# by Mike Reinhardt: https://github.com/mreinhardt/sfz-prompt.zsh
#
# Based on Lean by Miek Gieben: https://github.com/miekg/lean
#
# MIT License

PROMPT_SFZ_TMUX=${PROMPT_SFZ_TMUX-"t "}
PROMPT_SFZ_PATH_PERCENT=${PROMPT_SFZ_PATH_PERCENT-60}

prompt_sfz_help() {
  cat <<'EOF'
This is a one line prompt that tries to stay out of your face. It utilizes
the right side prompt for most information, like the CWD. The left side of
the prompt is only a '%'. The only other information shown on the left are
the jobs numbers of background jobs. When the exit code of a process isn't
zero the prompt turns red. If a process takes more then 5 (default) seconds
to run the total running time is shown in the next prompt.

Currently there is no configuration possible.

You can invoke it thus:

  prompt sfz

EOF
}

# turns seconds into human readable time, 165392 => 1d 21h 56m 32s
prompt_sfz_human_time() {
    local tmp=$1
    local days=$(( tmp / 60 / 60 / 24 ))
    local hours=$(( tmp / 60 / 60 % 24 ))
    local minutes=$(( tmp / 60 % 60 ))
    local seconds=$(( tmp % 60 ))
    (( $days > 0 )) && echo -n "${days}d "
    (( $hours > 0 )) && echo -n "${hours}h "
    (( $minutes > 0 )) && echo -n "${minutes}m "
    echo "${seconds}s "
}

# fastest possible way to check if repo is dirty
prompt_sfz_git_dirty() {
    # check if we're in a git repo
    command git rev-parse --is-inside-work-tree &>/dev/null || return
    # check if it's dirty
    local umode="-uno" #|| local umode="-unormal"
    command test -n "$(git status --porcelain --ignore-submodules ${umode} 2>/dev/null | head -100)"

    (($? == 0)) && echo ' +'
}

# displays the exec time of the last command if set threshold was exceeded
prompt_sfz_cmd_exec_time() {
    local stop=$EPOCHSECONDS
    local start=${cmd_timestamp:-$stop}
    integer elapsed=$stop-$start
    (($elapsed > ${PROMPT_SFZ_CMD_MAX_EXEC_TIME:=5})) && prompt_sfz_human_time $elapsed
}

prompt_sfz_preexec() {
    cmd_timestamp=$EPOCHSECONDS

    # shows the current dir and executed command in the title when a process is active
    print -Pn "\e]0;"
    echo -nE "$PWD:t: $2"
    print -Pn "\a"
}

prompt_sfz_pwd() {
    local sfz_path="`print -Pn '%~'`"
    if (($#sfz_path / $COLUMNS.0 * 100 > ${PROMPT_SFZ_PATH_PERCENT:=60})); then
        print -Pn '...%2/'
        return
    fi
    print "$sfz_path"
}

prompt_sfz_precmd() {
    vcs_info
    rehash

    local jobs
    local prompt_sfz_jobs
    unset jobs
    for a (${(k)jobstates}) {
        j=$jobstates[$a];i="${${(@s,:,)j}[2]}"
        jobs+=($a${i//[^+-]/})
    }
    # print with [ ] and comma separated
    prompt_sfz_jobs=""
    [[ -n $jobs ]] && prompt_sfz_jobs="%F{242}["${(j:,:)jobs}"] "

    PROMPT="$prompt_sfz_jobs%F{yellow}$prompt_sfz_tmux%(?.%F{blue}.%B%F{red})%#%f%b "
    RPROMPT="%F{yellow}`prompt_sfz_cmd_exec_time`%f%F{blue}`prompt_sfz_pwd`%F{242}$vcs_info_msg_0_`prompt_sfz_git_dirty`$prompt_sfz_host%f"

    unset cmd_timestamp # reset value since `preexec` isn't always triggered
}

prompt_sfz_setup() {
    prompt_opts=(cr subst percent)

    zmodload zsh/datetime
    autoload -Uz add-zsh-hook
    autoload -Uz vcs_info

    add-zsh-hook precmd prompt_sfz_precmd
    add-zsh-hook preexec prompt_sfz_preexec

    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:git*' formats ' %b'
    zstyle ':vcs_info:git*' actionformats ' %b|%a'

    [[ "$SSH_CONNECTION" != '' ]] && prompt_sfz_host=" %F{yellow}%m%f"
    [[ "$TMUX" != '' ]] && prompt_sfz_tmux=$PROMPT_SFZ_TMUX
}

prompt_sfz_setup "$@"
